name: CI/CD Microservices

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: microservices-cluster
  MIN_COVERAGE: 0

jobs:
  # 1) Detecta microservicios modificados y expone salida JSON (una sola línea)
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.changes.outputs.changed-services }}
      pr-number: ${{ steps.pr-info.outputs.number }}
      pr-title: ${{ steps.pr-info.outputs.title }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Ensure jq
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi
      - name: PR Information
        id: pr-info
        if: github.event_name == 'pull_request'
        run: |
          echo "number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          echo "title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "🔍 PR #${{ github.event.number }}: ${{ github.event.pull_request.title }}"
      - name: Detect Changed Services
        id: changes
        shell: bash
        run: |
          echo "🔍 Detectando microservicios modificados..."
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="${{ github.base_ref }}"
            echo "📋 Comparando con base branch: $BASE"
            # Asegura que exista la rama base localmente
            git fetch origin "$BASE:$BASE" --depth=1
          else
            BASE="HEAD~1"
            echo "📋 Comparando contra commit anterior"
          fi
          CHANGED_FILES=$(git diff --name-only "$BASE"...HEAD || true)
          SERVICES_JSON='[]'
          for dir in services/*/; do
            [[ -d "$dir" ]] || continue
            s=$(basename "$dir")
            if echo "$CHANGED_FILES" | grep -q "^services/$s/"; then
              echo "✅ $s: CAMBIOS DETECTADOS"
              # -c = salida compacta en una sola línea
              SERVICES_JSON=$(jq -c --arg svc "$s" '. + [$svc]' <<<"$SERVICES_JSON")
            else
              echo "⏭️  $s: Sin cambios"
            fi
          done
          echo "📊 Servicios a procesar (JSON): $SERVICES_JSON"
          # Escribir output en UNA sola línea evita el error "Invalid format"
          echo "changed-services=$SERVICES_JSON" >> "$GITHUB_OUTPUT"

  # 2) Test + Build; Push a ECR SOLO en push a main (matriz)

  # 3) Deploy a Producción (matrix)
  deploy_prod:
    needs: [detect-changes]
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.changed-services != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJSON(needs.detect-changes.outputs.changed-services) }}
    environment:
      name: production
      url: https://120569610818.dkr.ecr.us-east-1.amazonaws.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image
        id: build-image
        env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         COMMIT_SHA: ${{ github.sha }}
         SERVICE: ${{ matrix.service }}
        run: |
            IMAGE_TAG="$COMMIT_SHA-$SERVICE"
            FULL_IMAGE_NAME="$ECR_REGISTRY/$SERVICE:$IMAGE_TAG"
            
            echo "Building image for $SERVICE with tag $IMAGE_TAG"
            # 🚀 RUTA CORREGIDA/VERIFICADA: El contexto es la carpeta del servicio.
            docker build -t "$FULL_IMAGE_NAME" ../services/$SERVICE 
            
            echo "Pushing image $FULL_IMAGE_NAME to ECR"
            docker push "$FULL_IMAGE_NAME"
      

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Deploy to ECS (Fargate) - Producción
        env:
          CLUSTER: ${{ env.ECS_CLUSTER }}-prod
          SERVICE: ${{ matrix.service }}
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          COMMIT_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          # 🚀 Corrección: Usar la misma etiqueta definida en el paso de Build/Push
          IMAGE="$ECR_REGISTRY/$SERVICE:$COMMIT_SHA-$SERVICE" 
          echo "🚀 Deploy $SERVICE → $CLUSTER con imagen $IMAGE"
          TD_ARN=$(aws ecs describe-services --cluster "$CLUSTER" --services "$SERVICE" --query 'services[0].taskDefinition' --output text --region "$AWS_REGION")
          aws ecs describe-task-definition --task-definition "$TD_ARN" --query 'taskDefinition' --region "$AWS_REGION" > base.json
          jq 'del(.status,.taskDefinitionArn,.requiresAttributes,.revision,.compatibilities,.registeredAt,.registeredBy)' base.json > stripped.json
          if jq -e --arg S "$SERVICE" 'any(.containerDefinitions[].name; . == $S)' stripped.json >/dev/null; then
            jq --arg S "$SERVICE" --arg IMG "$IMAGE" '
              .containerDefinitions |= map(if .name == $S then .image = $IMG else . end)
            ' stripped.json > rendered.json
          else
            jq --arg S "$SERVICE" --arg IMG "$IMAGE" '
              .containerDefinitions |=
              (.[0].image = $IMG) as $x | map(if (.image|test("/"+$S+"(:|@|$)")) then (.image = $IMG) else . end)
            ' stripped.json > rendered.json
          fi
          NEW_TD_ARN=$(aws ecs register-task-definition --cli-input-json file://rendered.json --query 'taskDefinition.taskDefinitionArn' --output text --region "$AWS_REGION")
          aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --task-definition "$NEW_TD_ARN" --region "$AWS_REGION" >/dev/null
          echo "⏳ Esperando estabilidad..."
          aws ecs wait services-stable --cluster "$CLUSTER" --services "$SERVICE" --region "$AWS_REGION"
          echo "✅ $SERVICE desplegado en producción con $NEW_TD_ARN"

  # 4) Notificación de PR (si aplica)
  pr_notification:
    needs: [detect-changes]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.changed-services != '[]'
    steps:
      - name: PR Summary
        run: |
          echo "📋 RESUMEN DEL PULL REQUEST"
          echo "================================="
          echo "🔍 PR #${{ needs.detect-changes.outputs.pr-number }}: ${{ needs.detect-changes.outputs.pr-title }}"
          echo "🌿 Branch: ${{ github.head_ref }} → ${{ github.base_ref }}"
          echo "📊 Microservicios afectados:"
          for s in $(jq -r '.[]' <<< '${{ needs.detect-changes.outputs.changed-services }}'); do
            echo "   ✅ $s - Tests OK, imagen construida"
          done
          echo "================================="

  # 5) Cleanup local del runner
  cleanup:
    needs: [deploy_prod]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup docker
        run: |
          echo "🧹 Limpiando capas locales de Docker..."
          docker system prune -af || true
          echo "✅ Cleanup completado"
