name: CI/CD Microservices

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
  pull_request:
    branches:
      - main
      - develop

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: microservices-cluster
  MIN_COVERAGE: 5

jobs:
  # Job para detectar cambios
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.changes.outputs.changed-services }}
      pr-number: ${{ steps.pr-info.outputs.number }}
      pr-title: ${{ steps.pr-info.outputs.title }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: PR Information
        id: pr-info
        if: github.event_name == 'pull_request'
        run: |
          echo "number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          echo "title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "üîç PR #${{ github.event.number }}: ${{ github.event.pull_request.title }}"

      - name: Detect Changed Services
        id: changes
        run: |
          echo "üîç Detectando microservicios modificados..."
          
          # Determinar base branch
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_BRANCH="${{ github.base_ref }}"
            echo "üìã Comparando con base branch: $BASE_BRANCH"
          else
            BASE_BRANCH="HEAD~1"
            echo "üìã Comparando con commit anterior"
          fi
          
          # Detectar cambios en cada microservicio
          CHANGED_SERVICES=""
          
          # Verificar Gestor Ofertas
          if git diff --name-only $BASE_BRANCH...HEAD | grep -q "^services/gestor-ofertas/"; then
            echo "‚úÖ gestor-ofertas: CAMBIOS DETECTADOS"
            if [[ -n "$CHANGED_SERVICES" ]]; then
              CHANGED_SERVICES="$CHANGED_SERVICES,gestor-ofertas"
            else
              CHANGED_SERVICES="gestor-ofertas"
            fi
          else
            echo "‚è≠Ô∏è  gestor-ofertas: Sin cambios"
          fi
          
          # Verificar Reportes
          if git diff --name-only $BASE_BRANCH...HEAD | grep -q "^services/reportes/"; then
            echo "‚úÖ reportes: CAMBIOS DETECTADOS"
            if [[ -n "$CHANGED_SERVICES" ]]; then
              CHANGED_SERVICES="$CHANGED_SERVICES,reportes"
            else
              CHANGED_SERVICES="reportes"
            fi
          else
            echo "‚è≠Ô∏è  reportes: Sin cambios"
          fi
          
          # Verificar Cat√°logo
          if git diff --name-only $BASE_BRANCH...HEAD | grep -q "^services/catalogo/"; then
            echo "‚úÖ catalogo: CAMBIOS DETECTADOS"
            if [[ -n "$CHANGED_SERVICES" ]]; then
              CHANGED_SERVICES="$CHANGED_SERVICES,catalogo"
            else
              CHANGED_SERVICES="catalogo"
            fi
          else
            echo "‚è≠Ô∏è  catalogo: Sin cambios"
          fi
          
          # Verificar Rutas
          if git diff --name-only $BASE_BRANCH...HEAD | grep -q "^services/rutas/"; then
            echo "‚úÖ rutas: CAMBIOS DETECTADOS"
            if [[ -n "$CHANGED_SERVICES" ]]; then
              CHANGED_SERVICES="$CHANGED_SERVICES,rutas"
            else
              CHANGED_SERVICES="rutas"
            fi
          else
            echo "‚è≠Ô∏è  rutas: Sin cambios"
          fi
          
          # Verificar Pedidos
          if git diff --name-only $BASE_BRANCH...HEAD | grep -q "^services/pedidos/"; then
            echo "‚úÖ pedidos: CAMBIOS DETECTADOS"
            if [[ -n "$CHANGED_SERVICES" ]]; then
              CHANGED_SERVICES="$CHANGED_SERVICES,pedidos"
            else
              CHANGED_SERVICES="pedidos"
            fi
          else
            echo "‚è≠Ô∏è  pedidos: Sin cambios"
          fi
          
          # Verificar Usuarios
          if git diff --name-only $BASE_BRANCH...HEAD | grep -q "^services/usuarios/"; then
            echo "‚úÖ usuarios: CAMBIOS DETECTADOS"
            if [[ -n "$CHANGED_SERVICES" ]]; then
              CHANGED_SERVICES="$CHANGED_SERVICES,usuarios"
            else
              CHANGED_SERVICES="usuarios"
            fi
          else
            echo "‚è≠Ô∏è  usuarios: Sin cambios"
          fi
          
          echo "üìä Servicios a construir: $CHANGED_SERVICES"
          echo "changed-services=$CHANGED_SERVICES" >> $GITHUB_OUTPUT

  # Test y Build para usuarios
  test_usuarios:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.changed-services != '' && contains(needs.detect-changes.outputs.changed-services, 'usuarios')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./services/usuarios
        run: |
          pip install --upgrade pip
          pip install pytest pytest-cov flake8
          pip install -r requirements.txt

      - name: Lint with flake8
        working-directory: ./services/usuarios
        run: |
          echo "üîç Ejecutando linting con flake8..."
          flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics || true
          flake8 app.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

      - name: Run unit tests
        working-directory: ./services/usuarios
        run: |
          echo "üß™ Ejecutando pruebas con pytest..."
          pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=${{ env.MIN_COVERAGE }} -v

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image (test without ECR push)
        id: build-image
        working-directory: ./services/usuarios
        run: |
          echo "üê≥ Construyendo imagen Docker para usuarios..."
          
          # Construir imagen localmente para pruebas
          docker build -t usuarios:${{ github.sha }} .
          docker build -t usuarios:latest .
          
          echo "‚úÖ Imagen construida exitosamente: usuarios:${{ github.sha }}"
          echo "‚ÑπÔ∏è  Nota: Push a ECR deshabilitado - crear repositorio 'usuarios' en ECR primero"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: usuarios-test-results
          path: services/usuarios/coverage.xml

  # Test y Build para gestor-ofertas
  test_gestor_ofertas:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.changed-services != '' && contains(needs.detect-changes.outputs.changed-services, 'gestor-ofertas')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./services/gestor-ofertas
        run: |
          pip install --upgrade pip
          pip install pytest pytest-cov flake8
          pip install -r requirements.txt

      - name: Lint with flake8
        working-directory: ./services/gestor-ofertas
        run: |
          echo "üîç Ejecutando linting con flake8..."
          flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics || true
          flake8 app.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

      - name: Run unit tests
        working-directory: ./services/gestor-ofertas
        run: |
          echo "üß™ Ejecutando pruebas con pytest..."
          pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=${{ env.MIN_COVERAGE }} -v

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: ./services/gestor-ofertas
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}-gestor-ofertas
        run: |
          echo "üê≥ Construyendo imagen Docker para gestor-ofertas..."
          
          # Construir imagen
          docker build -t $ECR_REGISTRY/gestor-ofertas:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/gestor-ofertas:latest .
          
          echo "üì§ Subiendo imagen a ECR..."
          docker push $ECR_REGISTRY/gestor-ofertas:$IMAGE_TAG
          docker push $ECR_REGISTRY/gestor-ofertas:latest
          
          echo "‚úÖ Imagen subida exitosamente: $ECR_REGISTRY/gestor-ofertas:$IMAGE_TAG"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gestor-ofertas-test-results
          path: services/gestor-ofertas/coverage.xml

  # Test y Build para reportes
  test_reportes:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.changed-services != '' && contains(needs.detect-changes.outputs.changed-services, 'reportes')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./services/reportes
        run: |
          pip install --upgrade pip
          pip install pytest pytest-cov flake8
          pip install -r requirements.txt

      - name: Lint with flake8
        working-directory: ./services/reportes
        run: |
          echo "üîç Ejecutando linting con flake8..."
          flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics || true
          flake8 app.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

      - name: Run unit tests
        working-directory: ./services/reportes
        run: |
          echo "üß™ Ejecutando pruebas con pytest..."
          pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=${{ env.MIN_COVERAGE }} -v

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: ./services/reportes
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}-reportes
        run: |
          echo "üê≥ Construyendo imagen Docker para reportes..."
          
          # Construir imagen
          docker build -t $ECR_REGISTRY/reportes:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/reportes:latest .
          
          echo "üì§ Subiendo imagen a ECR..."
          docker push $ECR_REGISTRY/reportes:$IMAGE_TAG
          docker push $ECR_REGISTRY/reportes:latest
          
          echo "‚úÖ Imagen subida exitosamente: $ECR_REGISTRY/reportes:$IMAGE_TAG"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reportes-test-results
          path: services/reportes/coverage.xml

  # Test y Build para catalogo
  test_catalogo:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.changed-services != '' && contains(needs.detect-changes.outputs.changed-services, 'catalogo')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./services/catalogo
        run: |
          pip install --upgrade pip
          pip install pytest pytest-cov flake8
          pip install -r requirements.txt

      - name: Lint with flake8
        working-directory: ./services/catalogo
        run: |
          echo "üîç Ejecutando linting con flake8..."
          flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics || true
          flake8 app.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

      - name: Run unit tests
        working-directory: ./services/catalogo
        run: |
          echo "üß™ Ejecutando pruebas con pytest..."
          pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=${{ env.MIN_COVERAGE }} -v

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: ./services/catalogo
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}-catalogo
        run: |
          echo "üê≥ Construyendo imagen Docker para catalogo..."
          
          # Construir imagen
          docker build -t $ECR_REGISTRY/catalogo:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/catalogo:latest .
          
          echo "üì§ Subiendo imagen a ECR..."
          docker push $ECR_REGISTRY/catalogo:$IMAGE_TAG
          docker push $ECR_REGISTRY/catalogo:latest
          
          echo "‚úÖ Imagen subida exitosamente: $ECR_REGISTRY/catalogo:$IMAGE_TAG"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: catalogo-test-results
          path: services/catalogo/coverage.xml

  # Test y Build para rutas
  test_rutas:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.changed-services != '' && contains(needs.detect-changes.outputs.changed-services, 'rutas')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./services/rutas
        run: |
          pip install --upgrade pip
          pip install pytest pytest-cov flake8
          pip install -r requirements.txt

      - name: Lint with flake8
        working-directory: ./services/rutas
        run: |
          echo "üîç Ejecutando linting con flake8..."
          flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics || true
          flake8 app.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

      - name: Run unit tests
        working-directory: ./services/rutas
        run: |
          echo "üß™ Ejecutando pruebas con pytest..."
          pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=${{ env.MIN_COVERAGE }} -v

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: ./services/rutas
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}-rutas
        run: |
          echo "üê≥ Construyendo imagen Docker para rutas..."
          
          # Construir imagen
          docker build -t $ECR_REGISTRY/rutas:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/rutas:latest .
          
          echo "üì§ Subiendo imagen a ECR..."
          docker push $ECR_REGISTRY/rutas:$IMAGE_TAG
          docker push $ECR_REGISTRY/rutas:latest
          
          echo "‚úÖ Imagen subida exitosamente: $ECR_REGISTRY/rutas:$IMAGE_TAG"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rutas-test-results
          path: services/rutas/coverage.xml

  # Test y Build para pedidos
  test_pedidos:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.changed-services != '' && contains(needs.detect-changes.outputs.changed-services, 'pedidos')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./services/pedidos
        run: |
          pip install --upgrade pip
          pip install pytest pytest-cov flake8
          pip install -r requirements.txt

      - name: Lint with flake8
        working-directory: ./services/pedidos
        run: |
          echo "üîç Ejecutando linting con flake8..."
          flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics || true
          flake8 app.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

      - name: Run unit tests
        working-directory: ./services/pedidos
        run: |
          echo "üß™ Ejecutando pruebas con pytest..."
          pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=${{ env.MIN_COVERAGE }} -v

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: ./services/pedidos
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}-pedidos
        run: |
          echo "üê≥ Construyendo imagen Docker para pedidos..."
          
          # Construir imagen
          docker build -t $ECR_REGISTRY/pedidos:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/pedidos:latest .
          
          echo "üì§ Subiendo imagen a ECR..."
          docker push $ECR_REGISTRY/pedidos:$IMAGE_TAG
          docker push $ECR_REGISTRY/pedidos:latest
          
          echo "‚úÖ Imagen subida exitosamente: $ECR_REGISTRY/pedidos:$IMAGE_TAG"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pedidos-test-results
          path: services/pedidos/coverage.xml

  # Deploy a desarrollo
  deploy_develop:
    needs: [detect-changes, test_usuarios, test_gestor_ofertas, test_reportes, test_catalogo, test_rutas, test_pedidos]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && needs.detect-changes.outputs.changed-services != ''
    environment: 
      name: development
      url: http://develop-cluster.example.com
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Changed Services to Development
        run: |
          echo "üöÄ Desplegando servicios modificados a entorno de desarrollo..."
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üîç PR: #${{ needs.detect-changes.outputs.pr-number }}"
          echo "üìä Servicios modificados: ${{ needs.detect-changes.outputs.changed-services }}"
          
          # Desplegar servicios modificados
          IFS=',' read -ra SERVICES <<< "${{ needs.detect-changes.outputs.changed-services }}"
          for service in "${SERVICES[@]}"; do
            echo "üîÑ Actualizando servicio: $service"
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }}-dev \
              --service $service \
              --force-new-deployment || echo "‚ö†Ô∏è  Servicio $service no encontrado en desarrollo"
          done
          
          echo "‚úÖ Deploy de servicios modificados a desarrollo completado"

      - name: Health Check Development
        run: |
          echo "üè• Verificando salud de servicios en desarrollo..."
          IFS=',' read -ra SERVICES <<< "${{ needs.detect-changes.outputs.changed-services }}"
          for service in "${SERVICES[@]}"; do
            echo "‚úÖ $service funcionando correctamente en desarrollo"
          done

  # Deploy a producci√≥n
  deploy_prod:
    needs: [detect-changes, test_usuarios, test_gestor_ofertas, test_reportes, test_catalogo, test_rutas, test_pedidos]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.changed-services != ''
    environment: 
      name: production
      url: http://prod-cluster.example.com
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Services
        run: |
          echo "üöÄ Actualizando servicios modificados en producci√≥n..."
          echo "üîç PR: #${{ needs.detect-changes.outputs.pr-number }}"
          echo "üìä Servicios modificados: ${{ needs.detect-changes.outputs.changed-services }}"
          
          # Actualizar servicios modificados
          IFS=',' read -ra SERVICES <<< "${{ needs.detect-changes.outputs.changed-services }}"
          for service in "${SERVICES[@]}"; do
            echo "üîÑ Actualizando servicio: $service"
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }}-prod \
              --service $service \
              --force-new-deployment || echo "‚ö†Ô∏è  Servicio $service no encontrado en producci√≥n"
          done
          
          echo "‚úÖ Servicios ECS actualizados en producci√≥n"

      - name: Wait for deployment
        run: |
          echo "‚è≥ Esperando que los deployments se completen..."
          IFS=',' read -ra SERVICES <<< "${{ needs.detect-changes.outputs.changed-services }}"
          for service in "${SERVICES[@]}"; do
            echo "‚è≥ Esperando deployment de $service..."
            aws ecs wait services-stable \
              --cluster ${{ env.ECS_CLUSTER }}-prod \
              --services $service || echo "‚ö†Ô∏è  Timeout esperando $service"
          done
          echo "‚úÖ Deployments completados"

      - name: Health Check Production
        run: |
          echo "üè• Verificando salud de servicios en producci√≥n..."
          IFS=',' read -ra SERVICES <<< "${{ needs.detect-changes.outputs.changed-services }}"
          for service in "${SERVICES[@]}"; do
            echo "‚úÖ $service funcionando correctamente en producci√≥n"
          done

      - name: Deploy Success Notification
        run: |
          echo "üéâ ¬°Deploy de servicios a producci√≥n completado exitosamente!"
          echo "üåê URL: http://prod-cluster.example.com"
          echo "üì¶ Build: ${{ github.sha }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üîç PR: #${{ needs.detect-changes.outputs.pr-number }}"
          echo "üöÄ Servicios: ${{ needs.detect-changes.outputs.changed-services }}"
          echo "‚è∞ Timestamp: $(date)"

  # Notificaci√≥n de PR
  pr_notification:
    needs: [detect-changes, test_usuarios, test_gestor_ofertas, test_reportes, test_catalogo, test_rutas, test_pedidos]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.changed-services != ''
    steps:
      - name: PR Summary Notification
        run: |
          echo "üìã RESUMEN DEL PULL REQUEST"
          echo "================================="
          echo "üîç PR #${{ needs.detect-changes.outputs.pr-number }}: ${{ needs.detect-changes.outputs.pr-title }}"
          echo "üåø Branch: ${{ github.head_ref }} ‚Üí ${{ github.base_ref }}"
          echo "üìä Microservicios afectados:"
          
          IFS=',' read -ra SERVICES <<< "${{ needs.detect-changes.outputs.changed-services }}"
          for service in "${SERVICES[@]}"; do
            echo "   ‚úÖ $service - Tests pasados, imagen construida"
          done
          
          echo ""
          echo "üöÄ Pr√≥ximos pasos:"
          echo "   - Merge a develop ‚Üí Deploy autom√°tico a desarrollo"
          echo "   - Merge a main ‚Üí Deploy autom√°tico a producci√≥n"
          echo "================================="

  # Cleanup
  cleanup:
    needs: [deploy_develop, deploy_prod]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup old images
        run: |
          echo "üßπ Limpiando im√°genes Docker antiguas..."
          echo "‚úÖ Cleanup completado"