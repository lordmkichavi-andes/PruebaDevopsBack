name: CI/CD Microservices

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: medi-supply-cluster
  MIN_COVERAGE: 0

jobs:
  # 1) Detecta microservicios modificados y expone salida JSON (una sola l√≠nea)
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.changes.outputs.changed-services }}
      pr-number: ${{ steps.pr-info.outputs.number }}
      pr-title: ${{ steps.pr-info.outputs.title }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Ensure jq
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi
      - name: PR Information
        id: pr-info
        if: github.event_name == 'pull_request'
        run: |
          echo "number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          echo "title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "üîç PR #${{ github.event.number }}: ${{ github.event.pull_request.title }}"
      - name: Detect Changed Services
        id: changes
        shell: bash
        run: |
          echo "üîç Detectando microservicios modificados..."
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="${{ github.base_ref }}"
            echo "üìã Comparando con base branch: $BASE"
            # Asegura que exista la rama base localmente
            git fetch origin "$BASE:$BASE" --depth=1
          else
            BASE="HEAD~1"
            echo "üìã Comparando contra commit anterior"
          fi
          CHANGED_FILES=$(git diff --name-only "$BASE"...HEAD || true)
          SERVICES_JSON='[]'
          for dir in services/*/; do
            [[ -d "$dir" ]] || continue
            s=$(basename "$dir")
            if echo "$CHANGED_FILES" | grep -q "^services/$s/"; then
              echo "‚úÖ $s: CAMBIOS DETECTADOS"
              # -c = salida compacta en una sola l√≠nea
              SERVICES_JSON=$(jq -c --arg svc "$s" '. + [$svc]' <<<"$SERVICES_JSON")
            else
              echo "‚è≠Ô∏è  $s: Sin cambios"
            fi
          done
          echo "üìä Servicios a procesar (JSON): $SERVICES_JSON"
          # Escribir output en UNA sola l√≠nea evita el error "Invalid format"
          echo "changed-services=$SERVICES_JSON" >> "$GITHUB_OUTPUT"

  # 2) Test + Build; Push a ECR SOLO en push a main (matriz)

  # 3) Deploy a Producci√≥n (matrix)
  deploy_prod:
    needs: [detect-changes]
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.changed-services != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJSON(needs.detect-changes.outputs.changed-services) }}
    environment:
      name: production
      url: https://cdk-exp-container-assets-120569610818-us-east-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image
        id: build-image
        env:
           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
           COMMIT_SHA: ${{ github.sha }}
           SERVICE: ${{ matrix.service }}
        run: |
            IMAGE_TAG="$COMMIT_SHA-$SERVICE"
            FULL_IMAGE_NAME="$ECR_REGISTRY/$SERVICE:$IMAGE_TAG"
            
            echo "üîé Asegurando que el repositorio $SERVICE exista en ECR y sea inmutable..."
            
            # ‚úÖ CORRECCI√ìN: Se a√±ade --image-tag-mutability IMMUTABLE
            # y se corrige la ruta del 'docker build'
            aws ecr create-repository \
              --repository-name $SERVICE \
              --region ${{ env.AWS_REGION }} \
              --image-scanning-configuration scanOnPush=true \
              --image-tag-mutability IMMUTABLE \
              2>/dev/null || true
            
            echo "Building image for $SERVICE with tag $IMAGE_TAG"
            # ‚úÖ RUTA FINAL CORREGIDA
            docker build -t "$FULL_IMAGE_NAME" ./services/$SERVICE 
            
            echo "Pushing image $FULL_IMAGE_NAME to ECR"
            docker push "$FULL_IMAGE_NAME"
      

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Deploy to ECS (Fargate) - Producci√≥n
        env:
           CLUSTER: ${{ env.ECS_CLUSTER }}-prod
           SERVICE_SLUG: ${{ matrix.service }}
           AWS_REGION: ${{ env.AWS_REGION }}
           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
           COMMIT_SHA: ${{ github.sha }}
        run: |
            set -euo pipefail
            
            # 1. Asume que el nombre del servicio ECS contiene el slug capitalizado + 'Service'
            SERVICE_SLUG_CAPITALIZED_PREFIX="$(echo "$SERVICE_SLUG" | sed 's/\(.\)/\U\1/')"Service
            
            echo "üîç Buscando servicio ECS que contenga: $SERVICE_SLUG_CAPITALIZED_PREFIX"
            
            # Listar ARNs de servicios y extraer el nombre largo de CloudFormation
            FULL_SERVICE_ARN=$(aws ecs list-services --cluster "$CLUSTER" --region "$AWS_REGION" --query "serviceArns[]" --output text | \
                grep -i "$SERVICE_SLUG_CAPITALIZED_PREFIX" || true)
            
            # ‚úÖ CORRECCI√ìN CLAVE: Cambiar el √≠ndice de AWK de {print $2} a {print $3}
            FULL_SERVICE_NAME=$(echo "$FULL_SERVICE_ARN" | awk -F/ '{print $3}')
            
            if [ -z "$FULL_SERVICE_NAME" ]; then
               echo "‚ùå ERROR FATAL: No se encontr√≥ ning√∫n servicio ECS que coincida con '$SERVICE_SLUG_CAPITALIZED_PREFIX' en el cluster '$CLUSTER'."
               exit 1
            fi
            
            # 2. OBTENCI√ìN ROBUSTA DEL TASK DEFINITION ARN CON JQ
            
            echo "üîé Obteniendo Definici√≥n de Tarea actual para $FULL_SERVICE_NAME..."
            
            SERVICE_DESC_JSON=$(aws ecs describe-services \
                --cluster "$CLUSTER" \
                --services "$FULL_SERVICE_NAME" \
                --region "$AWS_REGION" \
                --output json)
            
            # Usar jq para extraer de forma segura el TD_ARN
            TD_ARN=$(echo "$SERVICE_DESC_JSON" | jq -r '.services[0].taskDefinition')
            
            # 3. Verificaci√≥n de ARN (¬°Clave para evitar la ClientException!)
            if [ "$TD_ARN" == "null" ] || [ -z "$TD_ARN" ]; then
               echo "‚ùå ERROR: El servicio '$FULL_SERVICE_NAME' existe, pero no se pudo obtener el Task Definition ARN."
               exit 1
            fi
            
            # 4. Continuar el proceso de despliegue
            
            IMAGE="$ECR_REGISTRY/$SERVICE_SLUG:$COMMIT_SHA-$SERVICE_SLUG" 
            echo "üöÄ Deploy $SERVICE_SLUG ‚Üí $FULL_SERVICE_NAME (TD: $TD_ARN) con imagen $IMAGE"
            
            # 5. Describir la Definici√≥n de Tarea
            aws ecs describe-task-definition --task-definition "$TD_ARN" --query 'taskDefinition' --region "$AWS_REGION" > base.json
            
            # 6. Manipulaci√≥n y Despliegue con JQ
            jq 'del(.status,.taskDefinitionArn,.requiresAttributes,.revision,.compatibilities,.registeredAt,.registeredBy)' base.json > stripped.json
            
            # El resto del script es correcto
            if jq -e --arg S "$SERVICE_SLUG" 'any(.containerDefinitions[].name; . == $S)' stripped.json >/dev/null; then
              jq --arg S "$SERVICE_SLUG" --arg IMG "$IMAGE" '
                .containerDefinitions |= map(if .name == $S then .image = $IMG else . end)
              ' stripped.json > rendered.json
            else
              jq --arg S "$SERVICE_SLUG" --arg IMG "$IMAGE" '
                .containerDefinitions |=
                (.[0].image = $IMG) as $x | map(if (.image|test("/"+$S+"(:|@|$)")) then (.image = $IMG) else . end)
              ' stripped.json > rendered.json
            fi
            
            NEW_TD_ARN=$(aws ecs register-task-definition --cli-input-json file://rendered.json --query 'taskDefinition.taskDefinitionArn' --output text --region "$AWS_REGION")
            
            # Usamos $FULL_SERVICE_NAME para el update
            aws ecs update-service --cluster "$CLUSTER" --service "$FULL_SERVICE_NAME" --task-definition "$NEW_TD_ARN" --region "$AWS_REGION" >/dev/null
            
            echo "‚è≥ Esperando estabilidad..."
            # Usamos $FULL_SERVICE_NAME para esperar estabilidad
            aws ecs wait services-stable --cluster "$CLUSTER" --services "$FULL_SERVICE_NAME" --region "$AWS_REGION"
            
            echo "‚úÖ $SERVICE_SLUG desplegado en producci√≥n con $NEW_TD_ARN"

  # 4) Notificaci√≥n de PR (si aplica)
  pr_notification:
    needs: [detect-changes]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.changed-services != '[]'
    steps:
      - name: PR Summary
        run: |
          echo "üìã RESUMEN DEL PULL REQUEST"
          echo "================================="
          echo "üîç PR #${{ needs.detect-changes.outputs.pr-number }}: ${{ needs.detect-changes.outputs.pr-title }}"
          echo "üåø Branch: ${{ github.head_ref }} ‚Üí ${{ github.base_ref }}"
          echo "üìä Microservicios afectados:"
          for s in $(jq -r '.[]' <<< '${{ needs.detect-changes.outputs.changed-services }}'); do
            echo "   ‚úÖ $s - Tests OK, imagen construida"
          done
          echo "================================="

  # 5) Cleanup local del runner
  cleanup:
    needs: [deploy_prod]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup docker
        run: |
          echo "üßπ Limpiando capas locales de Docker..."
          docker system prune -af || true
          echo "‚úÖ Cleanup completado"
